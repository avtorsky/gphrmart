// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/storage.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	models "github.com/avtorsky/gphrmart/internal/models"
	queue "github.com/avtorsky/gphrmart/internal/storage/queue"
	gomock "github.com/golang/mock/gomock"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// AddAccrualRecord mocks base method.
func (m *MockStorager) AddAccrualRecord(ctx context.Context, orderID string, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccrualRecord", ctx, orderID, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccrualRecord indicates an expected call of AddAccrualRecord.
func (mr *MockStoragerMockRecorder) AddAccrualRecord(ctx, orderID, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccrualRecord", reflect.TypeOf((*MockStorager)(nil).AddAccrualRecord), ctx, orderID, sum)
}

// AddOrder mocks base method.
func (m *MockStorager) AddOrder(ctx context.Context, orderID string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, orderID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockStoragerMockRecorder) AddOrder(ctx, orderID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockStorager)(nil).AddOrder), ctx, orderID, userID)
}

// AddUser mocks base method.
func (m *MockStorager) AddUser(ctx context.Context, username, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, username, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStoragerMockRecorder) AddUser(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStorager)(nil).AddUser), ctx, username, password)
}

// AddWithdrawalRecord mocks base method.
func (m *MockStorager) AddWithdrawalRecord(ctx context.Context, orderID string, sum float64, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWithdrawalRecord", ctx, orderID, sum, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWithdrawalRecord indicates an expected call of AddWithdrawalRecord.
func (mr *MockStoragerMockRecorder) AddWithdrawalRecord(ctx, orderID, sum, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWithdrawalRecord", reflect.TypeOf((*MockStorager)(nil).AddWithdrawalRecord), ctx, orderID, sum, userID)
}

// Close mocks base method.
func (m *MockStorager) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStoragerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorager)(nil).Close))
}

// FindOrderByID mocks base method.
func (m *MockStorager) FindOrderByID(ctx context.Context, orderID string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderByID", ctx, orderID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderByID indicates an expected call of FindOrderByID.
func (mr *MockStoragerMockRecorder) FindOrderByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderByID", reflect.TypeOf((*MockStorager)(nil).FindOrderByID), ctx, orderID)
}

// FindOrdersByUserID mocks base method.
func (m *MockStorager) FindOrdersByUserID(ctx context.Context, userID int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrdersByUserID", ctx, userID)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrdersByUserID indicates an expected call of FindOrdersByUserID.
func (mr *MockStoragerMockRecorder) FindOrdersByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrdersByUserID", reflect.TypeOf((*MockStorager)(nil).FindOrdersByUserID), ctx, userID)
}

// FindUser mocks base method.
func (m *MockStorager) FindUser(ctx context.Context, username, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", ctx, username, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockStoragerMockRecorder) FindUser(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockStorager)(nil).FindUser), ctx, username, password)
}

// GetBalance mocks base method.
func (m *MockStorager) GetBalance(ctx context.Context, userID int) (*models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID)
	ret0, _ := ret[0].(*models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStoragerMockRecorder) GetBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStorager)(nil).GetBalance), ctx, userID)
}

// GetWithdrawals mocks base method.
func (m *MockStorager) GetWithdrawals(ctx context.Context, userID int) ([]models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockStoragerMockRecorder) GetWithdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockStorager)(nil).GetWithdrawals), ctx, userID)
}

// Queue mocks base method.
func (m *MockStorager) Queue() queue.OrderStatusNotifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Queue")
	ret0, _ := ret[0].(queue.OrderStatusNotifier)
	return ret0
}

// Queue indicates an expected call of Queue.
func (mr *MockStoragerMockRecorder) Queue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queue", reflect.TypeOf((*MockStorager)(nil).Queue))
}

// UpdateOrderStatus mocks base method.
func (m *MockStorager) UpdateOrderStatus(ctx context.Context, orderID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, orderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockStoragerMockRecorder) UpdateOrderStatus(ctx, orderID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockStorager)(nil).UpdateOrderStatus), ctx, orderID, status)
}
