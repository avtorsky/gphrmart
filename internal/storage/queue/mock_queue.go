// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/queue/queue.go

// Package queue is a generated GoMock package.
package queue

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderStatusNotifier is a mock of OrderStatusNotifier interface.
type MockOrderStatusNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStatusNotifierMockRecorder
}

// MockOrderStatusNotifierMockRecorder is the mock recorder for MockOrderStatusNotifier.
type MockOrderStatusNotifierMockRecorder struct {
	mock *MockOrderStatusNotifier
}

// NewMockOrderStatusNotifier creates a new mock instance.
func NewMockOrderStatusNotifier(ctrl *gomock.Controller) *MockOrderStatusNotifier {
	mock := &MockOrderStatusNotifier{ctrl: ctrl}
	mock.recorder = &MockOrderStatusNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStatusNotifier) EXPECT() *MockOrderStatusNotifierMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockOrderStatusNotifier) Acquire(ctx context.Context) (*OrderStatusTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", ctx)
	ret0, _ := ret[0].(*OrderStatusTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockOrderStatusNotifierMockRecorder) Acquire(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockOrderStatusNotifier)(nil).Acquire), ctx)
}

// Add mocks base method.
func (m *MockOrderStatusNotifier) Add(ctx context.Context, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockOrderStatusNotifierMockRecorder) Add(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockOrderStatusNotifier)(nil).Add), ctx, orderID)
}

// Delete mocks base method.
func (m *MockOrderStatusNotifier) Delete(ctx context.Context, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrderStatusNotifierMockRecorder) Delete(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrderStatusNotifier)(nil).Delete), ctx, orderID)
}

// UpdateStatusAndRelease mocks base method.
func (m *MockOrderStatusNotifier) UpdateStatusAndRelease(ctx context.Context, orderID string, newStatusID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusAndRelease", ctx, orderID, newStatusID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusAndRelease indicates an expected call of UpdateStatusAndRelease.
func (mr *MockOrderStatusNotifierMockRecorder) UpdateStatusAndRelease(ctx, orderID, newStatusID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusAndRelease", reflect.TypeOf((*MockOrderStatusNotifier)(nil).UpdateStatusAndRelease), ctx, orderID, newStatusID)
}
